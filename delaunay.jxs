<jittershader name="fill-flat-quads">
	<description>Default Shader </description>
	<param name="position" type="vec3" state="POSITION" />
	<param name="middleTex0" type="int" default="0" />
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="posBuff" type="int" default="1" />
	<param name="color" type="vec4" state="COLOR" />
	<language name="glsl" version="1.5">
		<bind param="position" program="vp" />
		<bind param="middleTex0" program="gp" />
		<bind param="MVP" program="gp" />
		<bind param="posBuff" program="gp" />
		<bind param="color" program="vp" />
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core

in vec3 position;
in vec4 color;

out jit_PerVertex {
	flat vec4 color;	
	flat vec2 uv;
} jit_out;

void main() {	
	gl_Position = vec4( vec2(1.777777777777, 1)*(position.xy*2 - 1), 0, 1.);	
	jit_out.color = color;
	jit_out.uv = vec2(position.x, 1 - position.y);
}
]]>
		</program>
		<program name="gp" vertices_out="4" input_type="lines_adjacency" output_type="triangle_strip" type="geometry">
<![CDATA[
#version 330 core

layout (points) in;
layout (line_strip, max_vertices=4) out;

uniform sampler2D middleTex0;
uniform samplerBuffer posBuff;
uniform mat4 MVP;

in jit_PerVertex {
	flat vec4 color;	
	flat vec2 uv;
} jit_in[];

out jit_PerVertex {
	flat vec4 color;	
};

void main() {

	vec4 lookup = texture(middleTex0, jit_in[0].uv);
	color = vec4(1, 0.66, 0.66, 1);

	if(lookup.r != 0 || lookup.g != 0){

		vec3 posA = texelFetch(posBuff, int(lookup.r)).xyz;
		vec3 posB = texelFetch(posBuff, int(lookup.g)).xyz;	

		gl_Position = MVP*vec4(posA, 1);
		EmitVertex();

		gl_Position = MVP*vec4(posB, 1);
		EmitVertex();
		
		EndPrimitive();		
	}

}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core

in jit_PerVertex {
	flat vec4 color;
} jit_in;

out vec4 color;

void main() {
	color = jit_in.color;
}	
]]>
		</program>
	</language>
</jittershader>
